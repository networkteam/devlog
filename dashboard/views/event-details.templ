package views

import (
    "fmt"
    "time"
    "strconv"
    "strings"
    "log/slog"
    "net/url"

    "github.com/networkteam/devlog/collector"
)

// Empty detail state
templ EmptyDetails() {
    <div class="flex items-center justify-center h-full p-8 text-neutral-400">
        <div class="text-center">
            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="mx-auto mb-4"><rect width="18" height="18" x="3" y="3" rx="2"/><path d="M9 9h.01"/><path d="M15 9h.01"/><path d="M9 15h.01"/><path d="M15 15h.01"/></svg>
            <h3 class="text-lg font-medium">No Event Selected</h3>
            <p class="mt-2 text-sm">Click on an event from the list to view details</p>
        </div>
    </div>
    <script>
        // Remove "selected" class from "#event-list" elements
        document.querySelectorAll("#event-list .selected").forEach(function (el) {
            el.classList.remove("selected");
        });
    </script>
}

// Event details container (will load the correct detail type)
templ EventDetailContainer(event *collector.Event) {
    <div id="event-details">
        if event != nil {
            @EventDetails(event)
            <script>
                // Remove "selected" class from "#event-list" elements
                document.querySelectorAll("#event-list .selected").forEach(function (el) {
                    el.classList.remove("selected");
                });
                // Add "selected" class to the current event in the list
                document.querySelectorAll("#event-" + {{ event.ID }} + "-item").forEach(function (el) {
                    el.classList.add("selected");
                });
            </script>
        } else {
            @EmptyDetails()
        }
    </div>
}

// Dispatcher for different event types
templ EventDetails(event *collector.Event) {
    switch data := event.Data.(type) {
    case collector.HTTPRequest:
        @HTTPRequestDetails(event, data)
    case collector.HTTPServerRequest:
        @HTTPServerRequestDetails(event, data)
    case slog.Record:
        @LogRecordDetails(event, data)
    default:
        <div class="p-4">
            <div class="alert alert-warning">
                <p>Unknown event type: {fmt.Sprintf("%T", event.Data)}</p>
            </div>
        </div>
    }
}

// HTTP Client Request Details
templ HTTPRequestDetails(event *collector.Event, request collector.HTTPRequest) {
    {{ parsedURL, _ := url.Parse(request.URL) }}
    {{ duration := request.Duration() }}
    <div class="p-4">
        <div class="mb-6">
            <div class="flex items-center gap-2 mb-2">
                <div
                    class={ badgeClasses(BadgeProps{
                        Variant: BadgeVariantOutline,
                    }) }
                >
                    { request.Method }
                </div>
                <h2 class="text-lg font-semibold truncate">{ parsedURL.Path }</h2>
            </div>
            <div class="flex flex-wrap gap-4 text-sm text-muted-foreground">
                <div class="flex items-center gap-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
                    <span>
                        Status:
                        <span class={statusCodeTextColor(request.StatusCode)}>
                            { strconv.Itoa(request.StatusCode) }
                        </span>
                    </span>
                </div>
                <div class="flex items-center gap-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>
                    <span>{ formatDuration(duration) }</span>
                </div>
                <div class="flex items-center gap-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4"><path d="M5 12h14"></path><path d="M12 5v14"></path></svg>
                    <span>Outgoing</span>
                </div>
                <div>
                    <span>{ formatTime(request.RequestTime) }</span>
                </div>
            </div>
        </div>

        <!-- URL Details -->
        <div class="mb-4">
            <h3 class="text-sm font-semibold mb-2">URL</h3>
            <div class="bg-neutral-50 p-3 rounded border border-neutral-200 font-mono text-sm break-all">
                { request.URL }
            </div>
        </div>

        <!-- Tabs for Request/Response -->
        <div class="mb-4">
            <div class="border-b border-neutral-200">
                <nav class="flex -mb-px" role="tablist">
                    <button class="px-4 py-2 text-sm font-medium text-blue-600 border-b-2 border-blue-600">Request</button>
                    <button class="px-4 py-2 text-sm font-medium text-neutral-500 hover:text-neutral-700">Response</button>
                </nav>
            </div>

            <!-- Request Headers -->
            <div class="mt-4">
                <h4 class="text-sm font-semibold mb-2">Headers</h4>
                <div class="bg-neutral-50 rounded border border-neutral-200 overflow-hidden">
                    <table class="w-full text-sm">
                        <thead>
                            <tr class="bg-neutral-100">
                                <th class="text-left p-2 font-medium">Name</th>
                                <th class="text-left p-2 font-medium">Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            for key, values := range request.RequestHeaders {
                                <tr class="border-t border-neutral-200">
                                    <td class="p-2 align-top font-mono">{ key }</td>
                                    <td class="p-2 font-mono break-all">{ strings.Join(values, ", ") }</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Request Body -->
            if request.RequestBody != nil && request.RequestBody.Size() > 0 {
                <div class="mt-4">
                    <h4 class="text-sm font-semibold mb-2">Body</h4>
                    <div class="bg-neutral-50 p-3 rounded border border-neutral-200 font-mono text-sm overflow-auto max-h-96">
                        <pre>{ request.RequestBody.String() }</pre>
                    </div>
                </div>
            }
        </div>
    </div>
}

// HTTP Server Request Details
templ HTTPServerRequestDetails(event *collector.Event, request collector.HTTPServerRequest) {
    {{ duration := request.Duration() }}
    <div class="p-4">
        <div class="mb-6">
            <div class="flex items-center gap-2 mb-2">
                <div
                    class={ badgeClasses(BadgeProps{
                        Variant: BadgeVariantOutline,
                    }) }
                >
                    { request.Method }
                </div>
                <h2 class="text-lg font-semibold truncate">{ request.Path }</h2>
            </div>
            <div class="flex flex-wrap gap-4 text-sm text-muted-foreground">
                <div class="flex items-center gap-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
                    <span>
                        Status:
                        <span class={statusCodeTextColor(request.StatusCode)}>
                            { strconv.Itoa(request.StatusCode) }
                        </span>
                    </span>
                </div>
                <div class="flex items-center gap-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>
                    <span>{ formatDuration(duration) }</span>
                </div>
                <div class="flex items-center gap-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4"><path d="m3 16 4 4 4-4"></path><path d="M7 20V4"></path><path d="m21 8-4-4-4 4"></path><path d="M17 4v16"></path></svg>
                    <span>Incoming</span>
                </div>
                <div>
                    <span>{ formatTime(request.RequestTime) }</span>
                </div>
                <div class="flex items-center gap-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4"><circle cx="12" cy="12" r="10"></circle><path d="m9 10 1.5 1.5 4.5-4.5"></path><path d="M5 12v2a5 5 0 0 0 5 5"></path><path d="M19 12v2a5 5 0 0 1-5 5"></path></svg>
                    <span>From: { request.RemoteAddr }</span>
                </div>
            </div>
        </div>

        <!-- URL Details -->
        <div class="mb-4">
            <h3 class="text-sm font-semibold mb-2">URL</h3>
            <div class="bg-neutral-50 p-3 rounded border border-neutral-200 font-mono text-sm break-all">
                { request.URL }
            </div>
        </div>

        <!-- Tabs for Request/Response -->
        <div class="mb-4">
            <div class="border-b border-neutral-200">
                <nav class="flex -mb-px" role="tablist">
                    <button class="px-4 py-2 text-sm font-medium text-blue-600 border-b-2 border-blue-600">Request</button>
                    <button class="px-4 py-2 text-sm font-medium text-neutral-500 hover:text-neutral-700">Response</button>
                </nav>
            </div>

            <!-- Request Headers -->
            <div class="mt-4">
                <h4 class="text-sm font-semibold mb-2">Headers</h4>
                <div class="bg-neutral-50 rounded border border-neutral-200 overflow-hidden">
                    <table class="w-full text-sm">
                        <thead>
                            <tr class="bg-neutral-100">
                                <th class="text-left p-2 font-medium">Name</th>
                                <th class="text-left p-2 font-medium">Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            for key, values := range request.RequestHeaders {
                                <tr class="border-t border-neutral-200">
                                    <td class="p-2 align-top font-mono">{ key }</td>
                                    <td class="p-2 font-mono break-all">{ strings.Join(values, ", ") }</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Request Body -->
            if request.RequestBody != nil && request.RequestBody.Size() > 0 {
                <div class="mt-4">
                    <h4 class="text-sm font-semibold mb-2">Body</h4>
                    <div class="bg-neutral-50 p-3 rounded border border-neutral-200 font-mono text-sm overflow-auto max-h-96">
                        <pre>{ request.RequestBody.String() }</pre>
                    </div>
                </div>
            }
        </div>
    </div>
}

// Log Record Details
templ LogRecordDetails(event *collector.Event, record slog.Record) {
    <div class="p-4">
        <div class="mb-6">
            <div class="flex items-center gap-2 mb-2">
                <div
                    class={ badgeClasses(BadgeProps{
                        Variant: logLevelToBadgeVariant(record.Level),
                    }) }
                >
                    { record.Level }
                </div>
                <h2 class="text-lg font-semibold truncate">{ record.Message }</h2>
            </div>
            <div class="flex flex-wrap gap-4 text-sm text-muted-foreground">
                <div class="flex items-center gap-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>
                    <span>{ formatTime(record.Time) }</span>
                </div>
            </div>
        </div>

        <!-- Log Attributes -->
        <div class="mb-4">
            <h3 class="text-sm font-semibold mb-2">Attributes</h3>
            <div class="bg-neutral-50 rounded border border-neutral-200 overflow-hidden">
                <table class="w-full text-sm">
                    <thead>
                        <tr class="bg-neutral-100">
                            <th class="text-left p-2 font-medium">Key</th>
                            <th class="text-left p-2 font-medium">Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        for attr := range iterSlogAttrs(record) {
                            <tr class="border-t border-neutral-200">
                                <td class="p-2 align-top font-mono">{ attr.Key }</td>
                                <td class="p-2 font-mono break-all">{ attr.Value.String() }</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Context Section -->
        <div class="mt-6">
            <h3 class="text-sm font-semibold mb-2">Context</h3>
            <div class="text-sm text-neutral-600">
                <p>Log recorded at { formatTime(record.Time) }.</p>
                if event.Start != event.End {
                    <p class="mt-1">Duration: { formatDuration(event.End.Sub(event.Start)) }</p>
                }
            </div>
        </div>
    </div>
}

// Helper function to determine text color based on status code
func statusCodeTextColor(code int) string {
    switch {
    case code >= 500:
        return "text-red-600"
    case code >= 400:
        return "text-orange-600"
    case code >= 300:
        return "text-blue-600"
    case code >= 200:
        return "text-green-600"
    default:
        return "text-neutral-600"
    }
}

// Format time in a readable way
func formatTime(t time.Time) string {
    return t.Format("15:04:05.000")
}

// Format duration in a readable way
func formatDuration(d time.Duration) string {
    if d < time.Millisecond {
        return fmt.Sprintf("%dμs", d.Microseconds())
    } else if d < time.Second {
        return fmt.Sprintf("%dms", d.Milliseconds())
    } else {
        return fmt.Sprintf("%.2fs", d.Seconds())
    }
}